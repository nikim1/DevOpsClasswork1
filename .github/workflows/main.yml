name: Build and Publish Docker Image

on: push
env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  CheckCodeStyle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install flake8
        run: python3 -m pip install flake8
        
      - name: Check style
        run: flake8 src

  EditorconfigCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install editorconfig-checker
        run: pip install editorconfig-checker
        
      - name: Checking
        run: ec

  MarkdownfilesCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli

      - name: Run markdownlint test
        run: markdownlint **/*.md

  UnitTests:
    runs-on: ubuntu-latest
    container: python:3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: pip install -r src/requirements.txt

      - name: Run unit tests
        run: python3 -m unittest test/app_test.py

  SnykTest:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Run Snyk to check for vulnerabilities
        working-directory: ${{github.workspace}}/src
        run: |
          pip install -r requirements.txt
          npm install -g snyk
          snyk auth ${{secrets.SNYK_TOKEN}}
          snyk test

  SonarCloudTest:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  HardcodedSecretsCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check hardcoded secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  CheckDatabaseMigrations:
    runs-on: ubuntu-latest
    needs: ["CheckCodeStyle", "EditorconfigCheck", "MarkdownfilesCheck", "HardcodedSecretsCheck", "UnitTests", "SonarCloudTest"]
    services:
      mysql:
        image: mysql:8.1
        env:
          MYSQL_ROOT_PASSWORD: ${{secrets.MYSQL_ROOT_PASSWORD}}
          MYSQL_USER: ${{secrets.MYSQL_USER}}
          MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD}}
          MYSQL_DATABASE: ${{secrets.MYSQL_DB}}
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Database Migration Check
        run: |
          docker run --rm \
          --net="host" \
          -v "$(pwd)/flyway/db:/flyway/db" \
          -v "$(pwd)/flyway/migrations:/flyway/sql" \
          -v "$(pwd)/flyway/config:/flyway/conf" \
          redgate/flyway \
          -url="jdbc:mysql://localhost:3306/example?autoreconnect=true&allowPublicKeyRetrieval=true" \
          -user="flyway${{secrets.MYSQL_USER}}" -password="123456${{secrets.MYSQL_PASSWORD}}" \
          migrate

  build:
    runs-on: ubuntu-latest
    needs: ["CheckDatabaseMigrations"]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build an image
        run: docker build -t "my-first-python" .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'my-first-python'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Tag an image
        run: docker tag my-first-python nikim1/devopsclasswork1

      - name: Push Docker image
        run: |
          docker push nikim1/devopsclasswork1
